@{
    ViewData["Title"] = "Báo cáo doanh thu";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-chart-line me-2"></i>Báo cáo doanh thu</h2>
    <div>
        <button class="btn btn-warning me-2" onclick="createSampleData()">
            <i class="fas fa-database me-2"></i>Tạo data mẫu
        </button>
        <button class="btn btn-success" onclick="exportToExcel()">
            <i class="fas fa-file-excel me-2"></i>Xuất Excel
        </button>
    </div>
</div>

<!-- Thống kê tổng quan -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Tổng doanh thu</h6>
                        <h4 id="totalRevenue">0 VNĐ</h4>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-money-bill-wave fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Số đơn hàng</h6>
                        <h4 id="totalOrders">0</h4>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-shopping-cart fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Đơn hàng TB</h6>
                        <h4 id="avgOrderValue">0 VNĐ</h4>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-chart-bar fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Ngày cao nhất</h6>
                        <h4 id="highestDay">0 VNĐ</h4>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-trophy fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bộ lọc -->
<div class="card mb-4">
    <div class="card-body">
        <form id="filterForm" class="row g-3">
            <div class="col-md-3">
                <label for="fromDate" class="form-label">Từ ngày</label>
                <input type="date" id="fromDate" name="fromDate" class="form-control" />
            </div>
            <div class="col-md-3">
                <label for="toDate" class="form-label">Đến ngày</label>
                <input type="date" id="toDate" name="toDate" class="form-control" />
            </div>
            <div class="col-md-3">
                <label for="chartType" class="form-label">Loại biểu đồ</label>
                <select id="chartType" class="form-select">
                    <option value="bar">Biểu đồ cột</option>
                    <option value="line">Biểu đồ đường</option>
                    <option value="pie">Biểu đồ tròn</option>
                </select>
            </div>
            <div class="col-md-3 align-self-end">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-search me-2"></i>Xem báo cáo
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Biểu đồ -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-area me-2"></i>Biểu đồ doanh thu</h5>
            </div>
            <div class="card-body">
                <canvas id="revenueChart" height="100"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i>Thống kê theo tuần</h5>
            </div>
            <div class="card-body">
                <canvas id="weeklyChart" height="100"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Bảng chi tiết -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0"><i class="fas fa-table me-2"></i>Bảng chi tiết doanh thu</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="revenueTable">
                <thead class="table-dark">
                    <tr>
                        <th>Ngày</th>
                        <th>Số đơn hàng</th>
                        <th>Doanh thu</th>
                        <th>Đơn hàng TB</th>
                        <th>Tỷ lệ tăng trưởng</th>
                    </tr>
                </thead>
                <tbody id="revenueTableBody">
                    <!-- Dữ liệu sẽ được load bằng JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        let revenueChart, weeklyChart;
        let currentData = [];

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(amount);
        }

        function updateStatistics(data) {
            if (data.length === 0) return;

            const totalRevenue = data.reduce((sum, item) => sum + item.total, 0);
            const totalOrders = data.reduce((sum, item) => sum + item.orderCount, 0);
            const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;
            const highestDay = Math.max(...data.map(item => item.total));

            document.getElementById('totalRevenue').textContent = formatCurrency(totalRevenue);
            document.getElementById('totalOrders').textContent = totalOrders.toLocaleString('vi-VN');
            document.getElementById('avgOrderValue').textContent = formatCurrency(avgOrderValue);
            document.getElementById('highestDay').textContent = formatCurrency(highestDay);
        }

        function renderRevenueChart(labels, data, chartType = 'bar') {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            if (revenueChart) revenueChart.destroy();

            const gradient = ctx.createLinearGradient(0, 0, 0, 400);
            gradient.addColorStop(0, 'rgba(54, 162, 235, 0.8)');
            gradient.addColorStop(1, 'rgba(54, 162, 235, 0.1)');

            revenueChart = new Chart(ctx, {
                type: chartType,
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Doanh thu (VNĐ)',
                        data: data,
                        backgroundColor: chartType === 'line' ? gradient : 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        fill: chartType === 'line',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Doanh thu: ' + formatCurrency(context.parsed.y);
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        }
                    }
                }
            });
        }

        function renderWeeklyChart(data) {
            const ctx = document.getElementById('weeklyChart').getContext('2d');
            if (weeklyChart) weeklyChart.destroy();

            // Nhóm dữ liệu theo tuần
            const weeklyData = {};
            data.forEach(item => {
                const date = new Date(item.date);
                const weekStart = new Date(date);
                weekStart.setDate(date.getDate() - date.getDay());
                const weekKey = weekStart.toISOString().split('T')[0];
                
                if (!weeklyData[weekKey]) {
                    weeklyData[weekKey] = 0;
                }
                weeklyData[weekKey] += item.total;
            });

            const labels = Object.keys(weeklyData).map(date => {
                const d = new Date(date);
                return `Tuần ${d.getDate()}/${d.getMonth() + 1}`;
            });
            const values = Object.values(weeklyData);

            weeklyChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                            '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.label + ': ' + formatCurrency(context.parsed);
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateTable(data) {
            const tbody = document.getElementById('revenueTableBody');
            tbody.innerHTML = '';

            data.forEach((item, index) => {
                const row = document.createElement('tr');
                const growthRate = index > 0 ? ((item.total - data[index - 1].total) / data[index - 1].total * 100) : 0;
                const growthClass = growthRate > 0 ? 'text-success' : growthRate < 0 ? 'text-danger' : 'text-muted';
                const growthIcon = growthRate > 0 ? '↗' : growthRate < 0 ? '↘' : '→';

                row.innerHTML = `
                    <td><strong>${new Date(item.date).toLocaleDateString('vi-VN')}</strong></td>
                    <td>${item.orderCount}</td>
                    <td><strong>${formatCurrency(item.total)}</strong></td>
                    <td>${formatCurrency(item.total / item.orderCount)}</td>
                    <td class="${growthClass}">
                        ${growthIcon} ${Math.abs(growthRate).toFixed(1)}%
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function fetchData(fromDate, toDate) {
            try {
                let url = '/AdminOrder/GetRevenueData';
                const params = new URLSearchParams();
                if (fromDate) params.append('fromDate', fromDate);
                if (toDate) params.append('toDate', toDate);

                if (params.toString()) {
                    url += '?' + params.toString();
                }

                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                
                const data = await response.json();
                currentData = data;

                if (data.length === 0) {
                    alert('Không có dữ liệu trong khoảng thời gian này');
                    return;
                }

                const labels = data.map(x => new Date(x.date).toLocaleDateString('vi-VN'));
                const values = data.map(x => x.total);

                updateStatistics(data);
                updateTable(data);

                const chartType = document.getElementById('chartType').value;
                renderRevenueChart(labels, values, chartType);
                renderWeeklyChart(data);

            } catch (error) {
                console.error('Error fetching data:', error);
                alert('Có lỗi xảy ra khi tải dữ liệu');
            }
        }

        function exportToExcel() {
            if (currentData.length === 0) {
                alert('Không có dữ liệu để xuất');
                return;
            }

            let csvContent = "data:text/csv;charset=utf-8,";
            csvContent += "Ngày,Số đơn hàng,Doanh thu,Đơn hàng TB\n";

            currentData.forEach(item => {
                const row = [
                    new Date(item.date).toLocaleDateString('vi-VN'),
                    item.orderCount,
                    item.total,
                    (item.total / item.orderCount).toFixed(0)
                ].join(',');
                csvContent += row + '\n';
            });

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "bao_cao_doanh_thu.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Event listeners
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            fetchData(fromDate, toDate);
        });

        document.getElementById('chartType').addEventListener('change', function() {
            if (currentData.length > 0) {
                const labels = currentData.map(x => new Date(x.date).toLocaleDateString('vi-VN'));
                const values = currentData.map(x => x.total);
                renderRevenueChart(labels, values, this.value);
            }
        });

        function createSampleData() {
            if (confirm('Bạn có chắc muốn tạo data mẫu? Điều này sẽ tạo thêm 30 đơn hàng mẫu.')) {
                $.post('/AdminOrder/CreateSampleData', function(response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload(); // Reload trang để hiển thị data mới
                    } else {
                        alert('Lỗi: ' + response.message);
                    }
                }).fail(function() {
                    alert('Có lỗi xảy ra khi tạo data mẫu!');
                });
            }
        }

        // Set default date range (last 30 days)
        const today = new Date();
        const thirtyDaysAgo = new Date(today);
        thirtyDaysAgo.setDate(today.getDate() - 30);

        document.getElementById('fromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
        document.getElementById('toDate').value = today.toISOString().split('T')[0];

        // Load data on page load
        fetchData();
    </script>
} 